// // Declare table & functions
func run_sql(code) {
    force_eval( SQL( nulltype, code ))
}

// Cleaning
run_sql("DROP TABLE IF EXISTS xdiff.Rating")
run_sql("DROP TABLE IF EXISTS xdiff.Rating_del1")
run_sql("DROP TABLE IF EXISTS xdiff.Rating_update1")
run_sql("DROP TABLE IF EXISTS xdiff.Rating_update001p")
run_sql("DROP TABLE IF EXISTS xdiff.Rating_update1p")
run_sql("DROP TABLE IF EXISTS xdiff.Rating_del1p")
run_sql("DROP TABLE IF EXISTS xdiff.Rating_update50p")

// Import CSV
print "Importing the CSV through the Python script"
PY("0", "import _bq_import_csv")

run_sql("ALTER TABLE `datafold-dev-2.xdiff.Rating` ADD COLUMN id BYTES")
run_sql("UPDATE `datafold-dev-2.xdiff.Rating` SET id = cast(GENERATE_UUID() as bytes) WHERE True")

table xdiff.Rating { ...  }

Rating = xdiff.Rating

middle = count(Rating) /~ 2

// Code notes:
// - We use 'const table' to avoid updating the ids

// Rating_del1 = Delete middle row
run_sql("CREATE TABLE xdiff.Rating_del1 AS (SELECT * FROM xdiff.Rating)")
table xdiff.Rating_del1{...}
xdiff.Rating_del1[middle..(middle+1)] delete [true]
assert count(xdiff.Rating) == count(xdiff.Rating_del1) + 1

// Rating_del1 = Update middle row
run_sql("CREATE TABLE xdiff.Rating_update1 AS (SELECT * FROM xdiff.Rating)")
table xdiff.Rating_update1{...}
xdiff.Rating_update1[middle..(middle+1)] update {timestamp: timestamp + 1}

run_sql("CREATE TABLE xdiff.Rating_update001p AS (SELECT * FROM xdiff.Rating)")
run_sql("CREATE TABLE xdiff.Rating_update1p AS (SELECT * FROM xdiff.Rating)")
run_sql("CREATE TABLE xdiff.Rating_del1p AS (SELECT * FROM xdiff.Rating)")
run_sql("CREATE TABLE xdiff.Rating_update50p AS (SELECT * FROM xdiff.Rating)")

run_sql('UPDATE xdiff.Rating_update001p SET timestamp = (timestamp + 1) WHERE rand() < 0.0001')
run_sql('UPDATE xdiff.Rating_update1p SET timestamp = (timestamp + 1) WHERE rand() < 0.01')
run_sql('DELETE FROM xdiff.Rating_del1p WHERE rand() < 0.01')
run_sql('UPDATE xdiff.Rating_update50p SET timestamp = (timestamp + 1) WHERE rand() < 0.5')

// commit()