// Declare table & functions
func run_sql(code) {
    force_eval( SQL( nulltype, code ))
}

run_sql("DROP TABLE IF EXISTS Rating")
run_sql("DROP TABLE IF EXISTS Rating_del1")
run_sql("DROP TABLE IF EXISTS Rating_update1")
run_sql("DROP TABLE IF EXISTS Rating_update001p")
run_sql("DROP TABLE IF EXISTS Rating_update1p")
run_sql("DROP TABLE IF EXISTS Rating_del1p")
run_sql("DROP TABLE IF EXISTS Rating_update50p")

table Rating {
    userId: int
    movieId: int
    rating: float
    timestamp: int
}
Rating.add_index("id")

// Import CSV
run_sql("drop table if exists tmpRating")
run_sql("create table tmpRating(userId int, movieId int, rating float, timestamp int)")
table tmpRating {...}
print "Loading ratings CSV"
run_sql("BULK INSERT tmpRating from '/ratings_small.csv' with (fieldterminator = ',', rowterminator = '0x0a', FIRSTROW = 2);")
print "Populating actual table"
Rating += tmpRating
print "Removing temp table"
run_sql("drop table tmpRating")
commit()

middle = count(Rating) /~ 2

// Code notes:
// - We use 'const table' to avoid updating the ids

// Rating_del1 = Delete middle row
run_sql('begin transaction')
const table Rating_del1 = Rating
Rating_del1.add_index("id")
Rating_del1[middle..(middle+1)] delete [true]

// Rating_del1 = Update middle row
const table Rating_update1 = Rating
Rating_update1.add_index("id")
Rating_update1[middle..(middle+1)] update {timestamp: timestamp + 1}

const table Rating_update001p = Rating
const table Rating_update1p = Rating
const table Rating_del1p = Rating
const table Rating_update50p = Rating

Rating_update001p.add_index("id")
Rating_update1p.add_index("id")
Rating_del1p.add_index("id")
Rating_update50p.add_index("id")

run_sql('UPDATE Rating_update001p SET timestamp = (timestamp + 1) WHERE rand() < 0.0001')
run_sql('UPDATE Rating_update1p SET timestamp = (timestamp + 1) WHERE rand() < 0.01')
run_sql('DELETE FROM Rating_del1p WHERE rand() < 0.01')
run_sql('UPDATE Rating_update50p SET timestamp = (timestamp + 1) WHERE rand() < 0.5')

commit()